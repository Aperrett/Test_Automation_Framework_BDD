#! /usr/bin/env bash
set -e
if [ -n "$DEBUG" ]; then set -x; fi

#
# Main Functions
#

# Local functions
audit() {
  cd "$(dirname $0)"/..
  . .venv/bin/activate
  echo "Running audit over pip dependencies..."
  safety check
}

format() {
  cd "$(dirname $0)"/..
  . .venv/bin/activate
  echo "Running format over project..."
  autopep8 -aa -i -r .
  lint
}

lint() {
  cd "$(dirname $0)"/..
  . .venv/bin/activate
  echo "Running linter: Flake8 over project..."
  flake8 --config .tox.ini ./lib ./features
}

pip_list_outdated() {
  echo "Checking for outdated pip dependencies..."
  cd "$(dirname $0)"/..
  . .venv/bin/activate
  pip list --outdated
}

update_outdated_pip_packages() {
  echo "Updating outdated pip dependencies..."
  cd "$(dirname $0)"/..
  . .venv/bin/activate
  upgrade-requirements
}

check_python_version(){  
  echo "Checking Python for valid version..."
  ver=$(python3 -V 2>&1 | sed 's/.* \([0-9]\).\([0-9]\).*/\1\2/')
  if [ "$ver" -lt "38" ]; then
    echo "This script requires Python 3.8 or higher"
    echo "Your installed version of Python is: $(python3 -V)"
    exit 1
  fi
}

setup() {
  cd "$(dirname $0)"/..
  echo "Setting up your local environment for the Test Automation Framework..."
  echo "Installing venv..."
  rm -rf .venv && python3 -m venv .venv
  
  check_python_version
  . .venv/bin/activate

  echo "Upgrading pip..."
  pip install --upgrade pip

  echo "Installing pip dependencies..."
  pip install -r requirements.txt

  echo "Setup Complete"
}

# CI Functions
check_docker_podman(){
  # Check if Docker or Podman is installed.
  if [[ $(which docker) && $(docker --version) && $(docker ps) ]]; then
    echo "Docker is running..."
    cmd="docker"
  elif [[ $(which podman) && $(podman --version) && $(podman ps) ]]; then
    echo "Podman is running..."
    cmd="podman"
  else
  echo "Error: Docker or Podman is not installed or running..."
  exit
  fi
}

ci_build_checks() {
  check_docker_podman
  echo "Building TAF Container image..."
  taf_img=$($cmd build -q -t taf .)

  printf "\nRunning audit over pip dependencies...\n"
  $cmd run --entrypoint safety --rm "$taf_img" check

  printf "\nChecking for outdated pip dependencies...\n"
  $cmd run --entrypoint pip --rm "$taf_img" \
    list --outdated

  printf "\nRunning linter: Flake8 over project...\n"
  $cmd run --entrypoint flake8 --rm "$taf_img" \
    --config .tox.ini ./lib ./features
}

ci_cleanup() {
  check_docker_podman

  files=( "Dockerfile" "features" "lib" "pre-commit" "README.md" 
  "requirements.txt" "scripts" ".gitignore" ".behaverc"
  ".dockerignore" ".venv" "hosts" "screenshots")

  for file in "${files[@]}"
  do
    sudo rm -rf "$file"
    echo "Deleted file / folder: $file"
  done

  echo "list all files in the reports folder" 
  sudo ls -a reports

  echo "list all files in the project folder folder" 
  sudo ls -a
}

ci_delete_taf_image() {
  check_docker_podman
  taf_img="localhost/taf"

  echo "Deleting TAF Container image: $taf_img"
  $cmd rmi -f "$taf_img"
}


help () {
  echo ""
  echo "usage: <command>"
  echo ""
  echo "local Commands:"
  echo "  help                   - Show this message."
  echo "  audit                  - Run Security Audit of Python pip dependencies."
  echo "  format                 - Run format against the code."
  echo "  lint                   - Run Flake8 against the code."
  echo "  pip-list-outdated      - Run Check for outdated Python pip dependencies."
  echo "  update-pip-packages    - Run update for outdated Python pip dependencies."
  echo "  setup                  - Installs and setup your environment to use the Test Automation Framework."
  echo "CI Commands:"
  echo "  ci-build-checks        - Build the Container image and Runs the following Checks: Flake8, Security Audit, outdated pip dependencies"
  echo "  ci-cleanup             - Deletes all old folders and files after a test run."
  echo "  ci-delete-taf-image    - Deletes TAF Container Image."
}

main () {
  local command="$1"

  case "$command" in
    audit)
      audit
      ;;
    format)
      format
      ;;
    lint)
      lint
      ;;
    pip-list-outdated)
      pip_list_outdated
      ;;
    update-pip-packages)
      update_outdated_pip_packages
      ;;
    setup)
      setup
      ;;
    ci-build-checks)
      ci_build_checks
      ;;
    ci-cleanup)
      ci_cleanup
      ;;
    ci-delete-taf-image)
      ci_delete_taf_image
      ;;
    help)
      help
      ;;
    *)
      help 1>&2
      exit 1
      ;;
  esac
}

main "$@"